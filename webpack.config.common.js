const path = require('path');
const glob = require('glob');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');
const PostCSSAssetsPlugin = require('postcss-assets-webpack-plugin');

const rootDir = path.resolve(__dirname);
const buildDir = 'dist/code-assets';

// Define all entries:
const globals = ['./css/global.scss'];
const components = glob.sync('./templates/**/*.{scss,js}', {
  dotRelative: true,
  ignore: [
    "./templates/**/_*",    // Exclude from the bundle process files starting with '_'.
    "./templates/**/_*/**"  // Exclude from the bundle process entire directories starting with '_'.
  ]}
);

// Declare an entry object that will be assigned as value to the webpack 'entry' key:
const entry = {};

const allMatches = [...globals, ...components];

const localOutputPath = (filePath) => {
  const fileDir = path.dirname(filePath);
  const fileBasename = path.basename(filePath);
  const fileExtension = path.extname(fileBasename);
  const fileName = path.basename(fileBasename, fileExtension);
  let fileExtensionDir = 'ERROR/';

  switch (fileExtension) {
    case '.js':
      fileExtensionDir = 'js/';
      break;

    case '.scss':
      fileExtensionDir = 'css/';
      break;
  }

  return fileName + '/' + fileExtensionDir + fileName + '.processed';
};

allMatches.forEach((match) => {
  let entryKey = localOutputPath(match);
  entry[entryKey] = match;
});

const config = {

  entry: entry,

  output: {
    path: rootDir + "/" + buildDir,
    filename: "[name].js",
    clean: true,
  },

  module: {
    rules: [
      {
        test: /\.scss$/,
        exclude: /node_modules/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader
          },
          {
            loader: "css-loader",
            options: {
              sourceMap: true
            }
          },
          {
            loader: 'postcss-loader',
            options: {
              sourceMap: true,
              postcssOptions: {
                plugins: [
                  [
                    "autoprefixer",
                    {
                      // Options
                    },
                  ],
                ],
              },
            },
          },
          {
            loader: "sass-loader",
            options: {
              sourceMap: true,
              // Inject abstractions (variables, mixins and so on) in every scss component:
              additionalData: `@import "${rootDir}/abstractions/index";`
            }
          }
        ]
      },
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: { loader: 'babel-loader' }
      },
      {
        test: /\.(png|jp(e*)g|svg|gif)$/,
        exclude: /node_modules/,
        type: 'asset',
        generator: {
          // We want big images (not converted to base64 because > 8kb) to be placed within the generated component folder:
          filename: (pathData) => {
            // Split the image path in parts:
            const pathParts = pathData.filename.split("/");
            // Then find the 'images' folder
            const imagesIndex = pathParts.findIndex(k => k === 'images');
            // Finally return the path starting from component folder:
            return pathParts.slice(imagesIndex - 1).join('/');
          }
        }
      }
    ]
  },

  resolve: {
    extensions: [".js"],
    alias: {
      Components: path.resolve(__dirname, "templates/"),
    },
  },

  plugins: [
    // Removes the empty `.js` files (associated to style only entries) generated by webpack:
    new RemoveEmptyScriptsPlugin(),

    // Compile styles no inlined into the JS bundle, but in a separate CSS file:
    new MiniCssExtractPlugin({
      filename: '[name].css'
    }),

    // Apply postcss plugins to *.css extracted by ExtractTextPlugin:
    new PostCSSAssetsPlugin({
      test: /\.css$/,
      log: false,
      plugins: [
        require('postcss-sort-media-queries')
      ]
    }),
  ],

  stats: {
    preset: 'minimal',
    //children: true,
  },

};

module.exports = config;
