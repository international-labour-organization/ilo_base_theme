<?php

/**
 * @file
 * Theme file.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess().
 */
function ilo_base_theme_preprocess(&$variables) {
  $variables['ilo_asset_path'] = base_path() . \Drupal::service('extension.list.theme')->getPath('ilo_base_theme') . '/dist/assets';
  $variables['current_language_id'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $logo_languages = [
    'ar' => 'ar',
    'de' => 'de',
    'en' => 'en',
    'es' => 'es',
    'fr' => 'fr',
    'it' => 'it',
    'ja' => 'ja',
    'nl' => 'nl',
    'pt' => 'pt',
    'ru' => 'ru',
    'tr' => 'tr',
    'uk' => 'uk',
    'vi' => 'vi',
    'zh-hans' => 'zh'
  ];
  $variables['ilo_logo_language'] = array_key_exists($variables['current_language_id'], $logo_languages) ? $logo_languages[$variables['current_language_id']] : 'en';
}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function ilo_base_theme_preprocess_pattern_navigation(&$variables) {
  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree */
  $menu_link_tree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMinDepth(1);
  $parameters->setMaxDepth(3);
  $parameters->onlyEnabledLinks();
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_link_tree->load('main', $parameters);
  $tree = $menu_link_tree->transform($tree, $manipulators);
  $menu = $menu_link_tree->build($tree);

  // Extract cache metadata from main menu.
  $cache = CacheableMetadata::createFromRenderArray($menu);
  $cache->addCacheTags(['menu_link_content_list']);

  // Process current menu links and pass them to the pattern primary nav field.
  $variables['primarynav']['items'] = array_map(function ($item) {
    return [
      'label' => $item['title'],
      'link' => $item['url'],
    ];
  }, $menu['#items']);

  // Process "More" expandable items  and pass them to the pattern field.
  if (!empty($menu['#items']['ilo_base_theme_companion.main.more']['below'])) {
    $variables['subnav'] = [
      'navlabel' => t("Secondary Navigation"),
      'buttonlabel' => t("More"),
      'mobilecloselabel' => t("Close"),
      'mobilebacklabel' => t("Menu Home"),
      'items' => array_map(function ($item) {
        return [
          'label' => $item['title'],
          'link' => $item['url'],
        ];
      }, $menu['#items']['ilo_base_theme_companion.main.more']['below']),
    ];
  }

  // Always remove the convenience "More" menu link.
  unset($variables['primarynav']['items']['ilo_base_theme_companion.main.more']);

  // Only show language switcher if there is more than 1 language enabled.
  /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
  $language_manager = \Drupal::service('language_manager');
  $languages = $language_manager->getLanguages();
  if (count($languages) > 1) {
    $variables['languagelabel'] = $language_manager->getCurrentLanguage()->getName();
    $variables['languagecontextmenu'] = [
      'links' => [],
    ];
    foreach ($languages as $language) {
      // Do not print link to current language.
      if ($language->getId() === $variables['current_language_id']) {
        continue;
      }
      $variables['languagecontextmenu']['links'][] = [
        'label' => $language->getName(),
        // @todo: use the actual language switcher here.
        'url' => Url::fromRoute('<front>', [], [
          'language' => $language,
        ]),
      ];
    }
  }

  // Add language cache context and apply it to the current render array.
  $cache->addCacheContexts(['languages:' . LanguageInterface::TYPE_INTERFACE]);
  $cache->applyTo($variables);
}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function ilo_base_theme_preprocess_page(&$variables) {
  // @TODO: remove this once pattern preprocess are done.
  $variables['footer_primary_links'] = [
    [
      "label" => "Contact us",
      "url" => "https =>//www.ilo.org"
    ],
    [
      "label" => "Contact us",
      "url" => "https =>//www.ilo.org"
    ],
    [
      "label" => "Contact us",
      "url" => "https =>//www.ilo.org"
    ]
  ];
  $variables['footer_secondary_links'] = [
    [
      "label" => "Rights and permissions",
      "url" => "http =>//www.cnn.com"
    ],
    [
      "label" => "Privacy policy",
      "url" => "http =>//www.bing.com"
    ],
    [
      "label" => "Fraud alert",
      "url" => "http =>//www.yahoo.com"
    ],
    [
      "label" => "Disclaimer",
      "url" => "http =>//www.askjeeves.com"
    ]
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form_element.
 */
function ilo_base_theme_theme_suggestions_form_element_alter(&$suggestions, $variables) {
  if (!empty($variables['element']['#type'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for form_element__password_confirm.
 */
function ilo_base_theme_preprocess_form_element__password_confirm(&$variables) {
  // Add CSS classes needed for theming the password confirm widget.
  $variables['attributes']['class'][] = 'password-confirm';
  $variables['attributes']['class'][] = 'is-initial';
  $variables['attributes']['class'][] = 'is-password-empty';
  $variables['attributes']['class'][] = 'is-confirm-empty';
}

/**
 * Implements hook_preprocess_HOOK() for form_element__password.
 */
function ilo_base_theme_preprocess_form_element__password(&$variables) {
  if (!empty($variables['element']['#array_parents']) && in_array('pass1', $variables['element']['#array_parents'], TRUE)) {
    // This is the main password form element.
    $variables['attributes']['class'][] = 'password-confirm__password';
  }

  if (!empty($variables['element']['#array_parents']) && in_array('pass2', $variables['element']['#array_parents'], TRUE)) {
    // This is the password confirm form element.
    $variables['attributes']['class'][] = 'password-confirm__confirm';
  }
}
